import pygame
import random
from unit import Unit

# Constantes
GRID_SIZE = 8
CELL_SIZE = 60
WIDTH = GRID_SIZE * CELL_SIZE
HEIGHT = GRID_SIZE * CELL_SIZE
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
ORANGE = (255, 165, 0)

class Game:
    """
    Classe pour g√©rer le jeu ChronoTactics.
    """

    def __init__(self, screen):
        self.screen = screen
        self.player_units = [
            Unit(0, 0, 15, 3, 'player'),
            Unit(1, 0, 12, 2, 'player'),
        ]
        self.enemy_units = [
            Unit(6, 6, 10, 2, 'enemy'),
            Unit(7, 6, 10, 2, 'enemy'),
        ]
        self.portals = [(3, 3), (6, 1)]  # Portails temporels connect√©s
        self.anomalies = [(2, 2), (5, 5)]  # Cases ralentissantes

    def handle_player_turn(self):
        """Gestion du tour des joueurs."""
        for selected_unit in self.player_units:
            has_acted = False
            selected_unit.is_selected = True
            self.render()
            while not has_acted:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        exit()

                    if event.type == pygame.KEYDOWN:
                        dx, dy = 0, 0
                        if event.key == pygame.K_LEFT:
                            dx = -1
                        elif event.key == pygame.K_RIGHT:
                            dx = 1
                        elif event.key == pygame.K_UP:
                            dy = -1
                        elif event.key == pygame.K_DOWN:
                            dy = 1

                        selected_unit.move(dx, dy)

                        # Portail : t√©l√©portation
                        if (selected_unit.x, selected_unit.y) in self.portals:
                            self.teleport_unit(selected_unit)

                        # Anomalie : ralentissement
                        elif (selected_unit.x, selected_unit.y) in self.anomalies:
                            print(f"‚ö†Ô∏è {selected_unit.team} ralentit √† cause de l'anomalie temporelle !")

                        self.render()

                        # Touche espace pour attaquer
                        if event.key == pygame.K_SPACE:
                            for enemy in self.enemy_units:
                                if abs(selected_unit.x - enemy.x) <= 1 and abs(selected_unit.y - enemy.y) <= 1:
                                    selected_unit.attack(enemy)
                                    if enemy.health <= 0:
                                        self.enemy_units.remove(enemy)
                                    has_acted = True

            selected_unit.is_selected = False

    def handle_enemy_turn(self):
        """Gestion du tour de l'ennemi."""
        for enemy in self.enemy_units:
            target = random.choice(self.player_units)
            dx = 1 if enemy.x < target.x else -1 if enemy.x > target.x else 0
            dy = 1 if enemy.y < target.y else -1 if enemy.y > target.y else 0
            enemy.move(dx, dy)

            if abs(enemy.x - target.x) <= 1 and abs(enemy.y - target.y) <= 1:
                enemy.attack(target)
                if target.health <= 0:
                    self.player_units.remove(target)

    def teleport_unit(self, unit):
        """T√©l√©porte une unit√© √† un portail connect√©."""
        print(f"üåÄ {unit.team} traverse un portail temporel !")
        for portal in self.portals:
            if portal != (unit.x, unit.y):
                unit.x, unit.y = portal
                break

    def render(self):
        """Affiche l'√©tat actuel du jeu."""
        self.screen.fill(BLACK)
        for x in range(0, WIDTH, CELL_SIZE):
            for y in range(0, HEIGHT, CELL_SIZE):
                rect = pygame.Rect(x, y, CELL_SIZE, CELL_SIZE)
                pygame.draw.rect(self.screen, WHITE, rect, 1)

        # Portails
        for px, py in self.portals:
            pygame.draw.circle(self.screen, BLUE, (px * CELL_SIZE + CELL_SIZE // 2, py * CELL_SIZE + CELL_SIZE // 2), CELL_SIZE // 3)

        # Anomalies
        for ax, ay in self.anomalies:
            pygame.draw.circle(self.screen, ORANGE, (ax * CELL_SIZE + CELL_SIZE // 2, ay * CELL_SIZE + CELL_SIZE // 2), CELL_SIZE // 3)

        # Units
        for unit in self.player_units + self.enemy_units:
            unit.draw(self.screen)

        pygame.display.flip()


def main():
    """Point d'entr√©e du jeu."""
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("ChronoTactics")
    clock = pygame.time.Clock()

    game = Game(screen)

    while True:
        game.handle_player_turn()
        game.handle_enemy_turn()
        game.render()
        clock.tick(FPS)


if __name__ == "__main__":
    main()
